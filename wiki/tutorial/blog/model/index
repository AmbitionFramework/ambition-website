<span></span>
<div class="3u-first">
<section>
{include Learn/content}
</section>
</div>
<div class="9u">
<section>
{include tutorial/blog/contents}
# Part Two - Setting up the Model
<br />

In Part One, we created an application and a database, and even added some configuration linking the two. Now, the application needs to know what is in the database and how to connect to it. Luckily, this part is a breeze.

### Scaffolding your Database

Almanna has a lot of options designed to really get to know a database, but setting it up manually can be a drag. Luckily, Almanna has a tool to help put this together for you, and can regenerate any time a change is made to a database. The Almanna plugin exposes this to your application.

Given an application called Parchment, we'd like to create a Model called "DB" to handle the database calls. First, let's create that DB directory to store those classes.

    $ mkdir src/Model/DB

Next, using the information above, and what was entered into configuration, have Almanna generate "Entity classes" corresponding to your database.

    $ ambition almanna scaffold --dsn 'PostgreSQL://HOST=127.0.0.1;DB_NAME=parchment' \
    --user postgres --password postgres --namespace Parchment.Model.DB \
    --output src/Model/DB

Almanna will analyze the database, and create a series of files and directories for you inside src/Model/DB. They will be automatically added to the build list.

_AlmannaLoader.vala_ is used to tell the application what entities are available for use. This should not be edited.

_Entity_ contains all of the automatically generated entities for the application. Any time the scaffold command is run, these are overwritten, so they should be read instead of written to.

_Implementation_ contains the entities that will be used by your application. They can be edited at will, and simply subclass what is in Entity, in case tweaks need to be made, or relationships built.

### Creating relationships

Any edits to existing entities should be done in the Implementation, since those will not be overridden. When accessing data, links between entities, or relationships, make it easier to find related data. Since the scaffolder doesn't automatically create relationships, any relationship you may need in your application need to be created manually. In this case, we have a relationship between an entry and a publisher, a publisher and many entries, an entry and multiple entry tags, and between entry tag and tag.

Relationships are created by adding a property matching what the relationship consists of, and then adding the relationship to the `register_entity()` method. The first one will be shown, the rest will contain instructions to do the same to the other files.

To link an Entry to a Publisher, edit `src/Model/DB/Implementation/Entry.vala`. An Entry has one Publisher. It should look like this:

    using Almanna;
    
    namespace Parchment.Model.DB.Implementation {
        
        /**
         * Almanna Implementation for class "Entry".
         * Generated by almanna-generate.
         */
        public class Entry : Parchment.Model.DB.Entity.Entry {
            public Publisher publisher { get; set; }
    
            public override void register_entity() {
                base.register_entity();
    
                add_has_one( "publisher", "publisher_id", "publisher_id" );
            }
        }
    }

To link a Publisher to many Entry, edit `src/Model/DB/Implementation/Publisher.vala`. Add a property called `entries`, which will be an ArrayList of Entry. In `register_entity()`, add a line calling `add_has_many` with the property name, typeof(Entry), `"publisher_id"`, and `"publisher_id"`.

To link an entry with multiple entry tags, edit `src/Model/DB/Implementation/Entry.vala`. Add a property called `entry_tags`. Add a line calling `add_has_many`, similar to above, except with the new links for EntryTag and `"entry_id"`.

To link an EntryTag to a Tag, edit `src/Model/DB/Implementation/EntryTag.vala`. Add a property called `tag`. Add a line calling `add_has_one`, similar to above, with `"tag_id"`.

Done!

### Setting defaults

Our Entry class has some columns with reasonable defaults that the application should uphold. Let's make sure date_created is set when the object is created, and date_modified is always updated on save.

In `src/Model/DB/Implementation/Entry.vala`, add the following two methods:


            /**
             * Constructor to automatically set date_created to now when
             * instantiated.
             */
            public Entry() {
                base();
                this.date_created = new DateTime.now_local();
            }

            /**
             * Override save to set date_modified on every update.
             */
            public override void save() {
                this.date_modified = new DateTime.now_local();
                base.save();
            }

### Telling Parchment to connect

The final step is letting your application know to connect to the database you just configured. Open your application class, in src/Application.vala. Application will initialize your application before running it, so actions that need to be run before the application is run can be placed in the _init()_ method in this class. Change your init method to look like this:

    public override bool init( string[] args ) {
        Almanna.Repo.from_loader( new Parchment.Model.DB.AlmannaLoader() );
        return true;
    }

### Run your application

Whew! Now that we've configured and added so much, make sure the application still runs. Execute:

    $ ambition run

from your application directory, and make sure that the Almanna plugin loads, and no errors occur. The output should look similar to:

    ( info) Resolving dependencies...
    ( info) Running cmake...
    ( info) Building project...
    ( info) Executing application...
    ( info) Registered plugin 'Almanna'.
    ( info) Registered plugin 'Session'.
    (debug) Actions:
    (debug)  G    ^\/$                             /root/index
    (debug)  G    ^\/favicon.ico$                  /static
    (debug)  G    ^/static                         
    ( info) Starting Raw engine on port 8099

[[tutorial/blog/entries|Go on to Part Three - Show Some Entries >>]]

</section>
</div>